import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

TOKEN = '8417311694:AAGnD82Str6vjudpm7ia77cG-HvyIk01mlQ'
ADMIN_CHAT_ID = 5180138277  # –í–∞—à ID –≤ Telegram
PRICE_PER_DEVICE = 50  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
LINKS_DATABASE = {
    '1': ['https://drive.google.com/1dev1', 'https://drive.google.com/1dev2'],
    '2': ['https://drive.google.com/2dev1', 'https://drive.google.com/2dev2'],
    '3': ['https://drive.google.com/3dev1'],
    '4': ['https://drive.google.com/4dev1'],
    '5': ['https://drive.google.com/5dev1', 'https://drive.google.com/5dev3']
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
USED_LINKS_FILE = 'used_links.txt'

def load_used_links():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(USED_LINKS_FILE):
        return set()
    
    with open(USED_LINKS_FILE, 'r') as f:
        return set(line.strip() for line in f if line.strip())

def save_used_link(link):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    with open(USED_LINKS_FILE, 'a') as f:
        f.write(f"{link}\n")

def get_available_links(count):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    used_links = load_used_links()
    return [link for link in LINKS_DATABASE.get(count, []) if link not in used_links]

def is_admin(user_id):
    return user_id == ADMIN_CHAT_ID

def get_devices_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{i} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî {PRICE_PER_DEVICE*i}‚ÇΩ", callback_data=str(i))]
        for i in range(1, 6)
    ])

def get_admin_keyboard(user_id, count):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{user_id}_{count}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
    ])

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üõí *–ë–æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –ª–∏—Ü–µ–Ω–∑–∏–π*\n\n"
        f"üí∞ –¶–µ–Ω–∞: {PRICE_PER_DEVICE}‚ÇΩ –∑–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
        reply_markup=get_devices_keyboard(),
        parse_mode="Markdown"
    )

def process_device_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    count = query.data
    total = int(count) * PRICE_PER_DEVICE
    
    context.user_data['selected_devices'] = count
    
    query.edit_message_text(
        f"üî¢ *–í—ã–±—Ä–∞–Ω–æ:* {count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        f"üíµ *–ö –æ–ø–ª–∞—Ç–µ:* {total}‚ÇΩ\n\n"
        "üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n"
        "–ö–∞—Ä—Ç–∞: `2200 7012 3478 7676 `\n\n"
        "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞",
        parse_mode="Markdown"
    )

def handle_payment_proof(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    count = context.user_data.get('selected_devices', '1')
    username = update.message.from_user.username or f"id{user_id}"
    
    admin_message = (
        f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑*\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {count}\n"
        f"üí∏ –°—É–º–º–∞: {int(count)*PRICE_PER_DEVICE}‚ÇΩ"
    )
    
    if update.message.photo:
        update.message.forward(ADMIN_CHAT_ID)
        context.bot.send_message(
            ADMIN_CHAT_ID,
            admin_message,
            reply_markup=get_admin_keyboard(user_id, count),
            parse_mode="Markdown"
        )
    else:
        context.bot.send_message(
            ADMIN_CHAT_ID,
            f"{admin_message}\n‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {update.message.text}",
            reply_markup=get_admin_keyboard(user_id, count),
            parse_mode="Markdown"
        )
    
    update.message.reply_text("‚åõ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É!")

def process_admin_decision(update: Update, context: CallbackContext):
    query = update.callback_query
    action, *data = query.data.split('_')
    
    if not is_admin(query.from_user.id):
        query.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    if action == "reject":
        user_id = data[0]
        context.bot.send_message(
            user_id, 
            "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
        )
        query.edit_message_text(f"‚ùå –ó–∞–∫–∞–∑ {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    user_id = data[0]
    count = data[1]
    available_links = get_available_links(count)
    
    if not available_links:
        # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        query.answer("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫!", show_alert=True)
        context.bot.send_message(
            user_id,
            "‚ö† –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞\n"
            "üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
        )
        query.edit_message_text(
            f"‚ö† –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ({count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)\n"
            "üí∞ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É
    download_link = available_links[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
    save_used_link(download_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    context.bot.send_message(
        user_id,
        f"üéâ *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!*\n\n"
        f"üîó {download_link}\n\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {count}\n"
        f"üìå –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    
    query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É")

def admin_add_links(update: Update, context: CallbackContext):
    if not is_admin(update.message.from_user.id):
        update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    if len(context.args) < 2:
        update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addlinks –ö–û–õ–ò–ß–ï–°–¢–í–û –°–°–´–õ–ö–ê1 –°–°–´–õ–ö–ê2 ...")
        return
    
    count = context.args[0]
    new_links = context.args[1:]
    
    if count not in LINKS_DATABASE:
        LINKS_DATABASE[count] = []
    
    LINKS_DATABASE[count].extend(new_links)
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_links)} —Å—Å—ã–ª–æ–∫ –¥–ª—è {count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def admin_check_links(update: Update, context: CallbackContext):
    if not is_admin(update.message.from_user.id):
        update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
        return
    
    message = "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\n"
    for count in sorted(LINKS_DATABASE.keys()):
        available = len(get_available_links(count))
        total = len(LINKS_DATABASE[count])
        message += f"‚Ä¢ {count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {available}/{total} (–¥–æ—Å—Ç—É–ø–Ω–æ/–≤—Å–µ–≥–æ)\n"
    
    update.message.reply_text(message)

def main():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(USED_LINKS_FILE):
        open(USED_LINKS_FILE, 'w').close()
    
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("addlinks", admin_add_links))
    dp.add_handler(CommandHandler("links", admin_check_links))
    
    dp.add_handler(CallbackQueryHandler(process_device_selection, pattern=r'^[1-5]$'))
    dp.add_handler(CallbackQueryHandler(process_admin_decision, pattern=r'^(approve|reject)_\d+(_\d+)?$'))
    
    dp.add_handler(MessageHandler(Filters.text | Filters.photo, handle_payment_proof))
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()